---
title: "DataMining - Gym"
author: "Diogo Cruz   André Eiras"
format: pdf
editor: visual
---

```{r}
#| echo: false
#| warning: false
#| message: false

# Importing Libraries
library(dplyr)
library(factoextra)
library(ggplot2)
library(naniar)
library(cluster)
library(GGally)
library(ggmap)
library(maps)
library(kernlab)
library(patchwork)
library(plotly)
library(knitr)
library(kableExtra)
library(corrplot)
library(gridExtra)
library(cluster)
library(dbscan)
library(mclust)
set.seed(123)
```

# Dataset

```{r}
#Importing the dataset
df <- read.csv("gym.csv", stringsAsFactors = TRUE)
df$Experience_Level <- as.numeric(df$Experience_Level)
df_numeric <- df %>% select(where(is.numeric))
df_numeric$Gender <- ifelse(df$Gender == "Male", 1, 0)

df_dummies <- model.matrix(~ Workout_Type - 1, data = df)

df_dummies <- as.data.frame(df_dummies)

df_numeric <- cbind(df_numeric, df_dummies)


```

O dataset escolhido para este trabalho chama-se "*Gym Memebers Exercise Dataset*" tendo sido recolhido no *Kaggle*. O dataset tem informação detalhada sobre a rotina de exercícios, atributos físicos e dados demográficos de membros de um ginásio, sendo composto por 15 variáveis cada uma com 973 observações.

```{r}
cat("Número de observações:",nrow(df), "\n")
cat("Número de variávei:",ncol(df), "\n")
sapply(df, class)
```

A lista seguinte indica o significado e tipo de cada uma das variáveis presentes.

-   `Age` - Varíavel Quantitativa Contínua que indica a idade do membro.
-   `Gender` - Varíavel Categórica que indica o género do membro.
-   `Weigh` - Variável Quantitativa Contínua com a massa do membro em kg.
-   `Height` - Variável Quantitativa Contínua com a altura do membro em metros.
-   `Max BPM` - Varíavel Quantitativa Contínua que indica a frequência cardíaca máxima atingida pelo membro durante o seu treino em batimentos por minuto.
-   `Avg BPM` - Varíavel Quantitativa Contínua que indica a frequência cardíaca média do membro durante o seu treino em batimentos por minuto.
-   `Resting BPM` - Varíavel Quantitativa Contínua que indica a frequência cardíaca do membro em descanso antes do treino.
-   `Session Duration` - Varíavel Quantitativa Contínua que indica a duração do treino em horas.
-   `Calories Burned` - Variável Quantitativa Contínua que indica a quantidade de calorias gastas durante o treino em kCal.
-   `Workout Type` - Varíavel Categórica que inidica o tipo de treino realizado.
-   `Fat Percentage` - Variável Quantitativa Contínua que indica a percentagem de massa gorda do membro.
-   `Water Intake` - Variável Quantitativa Contínua que indica o número de litros de água ingeridos diáriamente pelo membro.
-   `Workout Frequency` - Variável Quantitativa Discreta que indica o número de dias por semana em que o membro treinou.
-   `Experience Level` - Variável Quantitativa Discreta que indica o nível de experiência (1 a 3) do membro.
-   `BMI` - Variável Quantitativa Contínua que indica o Índice de Massa Corporal do membro.

Como é possível ver no gráfico seguinte, o dataset não apresenta dados omissos.

```{r}
gg_miss_var(df)
```

# Análise Exploratória do Dataset

## Análise Univariada

```{r}
#| echo: FALSE
#| messgae: FALSE

bin_width <- function(x) {
  IQR_x <- IQR(x, na.rm = TRUE)  # Intervalo interquartil
  n <- sum(!is.na(x))  # Número de observações não nulas
  (2 * IQR_x) / (n^(1/3))  # Regra de Freedman-Diaconis
}

hist_and_box <- function(data=df, x, x_name){
  
  box_plot <- ggplot(data, aes(x = x)) +
  geom_boxplot() +
  coord_cartesian(xlim = range(x, na.rm = TRUE)) +  # Align scales with histogram
  labs(x = x_name) +
  theme(legend.position = "none")

  hist_plot <- ggplot(data, aes(x = x)) +
    geom_histogram(position = "identity", color = "black", binwidth = bin_width(x)) +
    coord_cartesian(xlim = range(x, na.rm = TRUE))+
    labs(
         x =x_name,
         y = "Frequency") +
    scale_x_continuous() +
    theme(legend.position = "none",
          axis.text.x = element_text(angle = 60, hjust = 1))
  
  combined_plot <- box_plot / hist_plot + plot_layout(heights = c(3, 8))
  combined_plot
  
}

stats_calc <- function(var) {
  # Calcular as estatísticas
  media <- mean(var, na.rm = TRUE)
  sd <- sd(var, na.rm = TRUE)
  mediana <- median(var, na.rm = TRUE)
  iqr <- IQR(var, na.rm = TRUE)
  minimo <- min(var, na.rm = TRUE)
  maximo <- max(var, na.rm = TRUE)
  
  # Criar a tabela com a estrutura desejada
  resultado <- data.frame(
    Estatística = c("Média", "Mediana", "Mínimo"),
    Valor = c(media, mediana, minimo),
    Estatística = c("SD", "IQR", "Máximo"),
    Valor = c(sd, iqr, maximo)
  )
  
  return(resultado)
}
```

De modo a analisar a distribuição das nossas variáveis fizemos boxplot com histograma para cada variavel numérica. Podemos ver que a idade e as três variáveis referentes à frequência cardíaca dos mesmbros apresentam uma distribuição práticamente uniforme. Já as restantes variáveis apresentam distribuições com uma forma aproximadamente normal mas com assimetrias.

```{r}
hist_and_box(df, df$Age, "Age (Years)")

hist_and_box(df, df$Weight..kg., "Weight (kg)")

hist_and_box(df, df$Height..m., "Height (m)")

hist_and_box(df, df$Max_BPM, "Max BPM")

hist_and_box(df, df$Avg_BPM, "Average BPM")

hist_and_box(df, df$Resting_BPM, "Resting BPM")

hist_and_box(df, df$Session_Duration..hours., "Session Duration (Hours)")

hist_and_box(df, df$Calories_Burned, "Calories Burned (kcal)")

hist_and_box(df, df$Fat_Percentage, "Fat Percentage (%)")

hist_and_box(df, df$Water_Intake..liters., "Water Intake (L)")

hist_and_box(df, df$Experience_Level, "Experience Level")

hist_and_box(df, df$BMI, "BMI")

```

A tabela seguinte mostra as estatísticas descritivas das variáveis numéricas do dataset.

```{r}
summary_stats <- data.frame(
  Variable = c("Age (Years)", "Weight (kg)", "Height (m)", "Max BPM", "Average BPM", 
               "Resting BPM", "Session Duration (Hours)", "Calories Burned (kcal)", 
               "Fat Percentage (%)", "Water Intake (l)", "BMI"),
  Mean = round(c(mean(df$Age, na.rm = TRUE), mean(df$Weight..kg., na.rm = TRUE), 
                 mean(df$Height..m., na.rm = TRUE), mean(df$Max_BPM, na.rm = TRUE), 
                 mean(df$Avg_BPM, na.rm = TRUE), mean(df$Resting_BPM, na.rm = TRUE),
                 mean(df$Session_Duration..hours., na.rm = TRUE), mean(df$Calories_Burned, na.rm = TRUE),
                 mean(df$Fat_Percentage, na.rm = TRUE), mean(df$Water_Intake..liters., na.rm = TRUE),
                 mean(df$BMI, na.rm = TRUE)), 2),
  SD = round(c(sd(df$Age, na.rm = TRUE), sd(df$Weight..kg., na.rm = TRUE),
               sd(df$Height..m., na.rm = TRUE), sd(df$Max_BPM, na.rm = TRUE),
               sd(df$Avg_BPM, na.rm = TRUE), sd(df$Resting_BPM, na.rm = TRUE),
               sd(df$Session_Duration..hours., na.rm = TRUE), sd(df$Calories_Burned, na.rm = TRUE),
               sd(df$Fat_Percentage, na.rm = TRUE), sd(df$Water_Intake..liters., na.rm = TRUE),
               sd(df$BMI, na.rm = TRUE)), 2),
  Median = round(c(median(df$Age, na.rm = TRUE), median(df$Weight..kg., na.rm = TRUE),
                   median(df$Height..m., na.rm = TRUE), median(df$Max_BPM, na.rm = TRUE),
                   median(df$Avg_BPM, na.rm = TRUE), median(df$Resting_BPM, na.rm = TRUE),
                   median(df$Session_Duration..hours., na.rm = TRUE), median(df$Calories_Burned, na.rm = TRUE),
                   median(df$Fat_Percentage, na.rm = TRUE), median(df$Water_Intake..liters., na.rm = TRUE),
                   median(df$BMI, na.rm = TRUE)), 2),
  IQR = round(c(IQR(df$Age, na.rm = TRUE), IQR(df$Weight..kg., na.rm = TRUE),
                IQR(df$Height..m., na.rm = TRUE), IQR(df$Max_BPM, na.rm = TRUE),
                IQR(df$Avg_BPM, na.rm = TRUE), IQR(df$Resting_BPM, na.rm = TRUE),
                IQR(df$Session_Duration..hours., na.rm = TRUE), IQR(df$Calories_Burned, na.rm = TRUE),
                IQR(df$Fat_Percentage, na.rm = TRUE), IQR(df$Water_Intake..liters., na.rm = TRUE),
                IQR(df$BMI, na.rm = TRUE)), 2),
  Min = round(c(min(df$Age, na.rm = TRUE), min(df$Weight..kg., na.rm = TRUE),
                min(df$Height..m., na.rm = TRUE), min(df$Max_BPM, na.rm = TRUE),
                min(df$Avg_BPM, na.rm = TRUE), min(df$Resting_BPM, na.rm = TRUE),
                min(df$Session_Duration..hours., na.rm = TRUE), min(df$Calories_Burned, na.rm = TRUE),
                min(df$Fat_Percentage, na.rm = TRUE), min(df$Water_Intake..liters., na.rm = TRUE),
                min(df$BMI, na.rm = TRUE)), 2),
  Max = round(c(max(df$Age, na.rm = TRUE), max(df$Weight..kg., na.rm = TRUE),
                max(df$Height..m., na.rm = TRUE), max(df$Max_BPM, na.rm = TRUE),
                max(df$Avg_BPM, na.rm = TRUE), max(df$Resting_BPM, na.rm = TRUE),
                max(df$Session_Duration..hours., na.rm = TRUE), max(df$Calories_Burned, na.rm = TRUE),
                max(df$Fat_Percentage, na.rm = TRUE), max(df$Water_Intake..liters., na.rm = TRUE),
                max(df$BMI, na.rm = TRUE)), 2)
)

# Exibir a tabela com kable (na ordem: Mean, SD, Median, IQR, Min, Max)
kable(summary_stats, format = "pipe", digits = 2, caption = "Estatísticas Descritivas das Variáveis")


```

## Análise de Correlação

A matriz de correlação permite-nos perceber a relação entre as variáveis numéricas do dataset. Através da matriz de correlação conseguimos perceber quais as variáveis que estão mais correlacionadas entre si.

As variáveis com maior correlação são as Calorias queimadas durante o exercício e a duração da sessão de treino, com uma correlação de 0.91. Este valor é expéctavel uma vez que quanto mais tempo de treino, mais calorias são queimadas. A massa e a o índice de massa corporal também apresentam uma forte correlação positiva. Por outro lado, a maior correlação negativa é entre a percentagem de massa gorda e o nível de experiência, sendo esta correlação quase tão fortes como a correlação entre as calorias queimadas e a percentagem de massa gorda.

```{r}

cor_matrix <- cor(df_numeric, use = "pairwise.complete.obs")
cor_long <- as.data.frame(as.table(cor_matrix))
short_names <- abbreviate(colnames(cor_matrix), minlength = 6)

corrplot(cor_matrix)

cor_long <- cor_long %>% filter(Var1 != Var2)

cor_long <- cor_long %>%
  mutate(pair = apply(cor_long[, 1:2], 1, function(x) paste(sort(x), collapse = "_"))) %>%
  distinct(pair, .keep_all = TRUE) %>%
  select(-pair)


top_5 <- cor_long %>% arrange(desc(Freq)) %>% head(5)
bottom_5 <- cor_long %>% arrange(Freq) %>% head(5)

print("Top 5 maiores correlações:")
print(top_5)

print("Top 5 menores correlações:")
print(bottom_5)
```

```{r}
scatter_plot <- function(data, x_var, y_var, x_label, y_label, title = "Scatter Plot") {
  ggplot(data, aes(x = x_var, y = y_var)) +
    geom_point(color = "black", alpha = 0.6) +  # Blue points with transparency
    labs(x = x_label, y = y_label, title = paste(y_label, "vs.", x_label)) +
    theme_minimal(base_size = 14)  # Clean theme with readable font size
}
```

```{r}
scatter_plot(df, df$Session_Duration..hours., df$Calories_Burned, "Duração da sessão (horas)", "Calorias Queimadas (kcal)")
scatter_plot(df, df$Weight..kg., df$BMI, "Massa (kg)", "Índice de Massa Corporal")
scatter_plot(df, df$Experience_Level, df$Fat_Percentage, "Nível de Experiência", "Percentagem de Gordura")

scatter_plot(df, df$Fat_Percentage, df$Calories_Burned, "Percentagem de Gordura", "Calorias Queimadas (kg)")

```

# Análise das Componentes Principais

A Análise das Componentes Principais (PCA) é uma técnica de redução de dimensionalidade que permite representar os dados num espaço de dimensão inferior. A PCA é uma técnica muito útil para visualizar a estrutura dos dados e identificar padrões. Para realizar a PCA, é necessário normalizar os dados, de modo a que todas as variáveis tenham a mesma escala.

A tabela seguinte mostra o resumo da PCA, onde é possível ver a variância explicada por cada componente principal. A primeira componente principal explica 31% da variância total, enquanto a segunda componente principal explica 16% da variância total. Juntas, as duas primeiras componentes principais explicam 47% da variância total.

```{r}
df_scaled <- scale(df_numeric)
pca <- prcomp(df_scaled, center = TRUE, scale. = TRUE)
pca_summary <- round(summary(pca)$importance, 2)
kable(pca_summary, caption = "Resumo da ACP")
```

Pela análise do Scree Plot, é possível perceber que a partir da terceira componente principal, a variância explicada por cada componente diminui consideravelmente. Assim, podemos concluir que as três primeiras componentes principais são as mais importantes para explicar a variância dos dados.

```{r}
fviz_eig(pca, addlabels = TRUE, ylim = c(0, 50)) +
  labs(title = "Scree Plot - Variância Explicada pela PCA")
```

```{r}
loadings_3_pcas <- pca$rotation[, 1:3]
kable(round(loadings_3_pcas,3), caption = "Loadings dos 3 Primeiros Componentes Principais")


```

A tabela seguinte mostra as três variáveis mais influentes em cada componente principal. A primeira componente principal é influenciada principalmente pelo nível de experiência, pelas calorias queimadas e pela duração do treino. A segunda componente principal é influenciada principalmente pela massa, pelo índice de massa corporal e pela ingestão de água. Já a terceira componente principal é influenciada principalmente pela altura, pelo índice de massa corporal e pela ingestão diária de água.

```{r}
top_variables <- apply(loadings_3_pcas, 2, function(x) {
  names(sort(abs(x), decreasing = TRUE)[1:3])
})


top_variables_df <- as.data.frame(top_variables)
colnames(top_variables_df) <- c("PC1", "PC2", "PC3")

kable(top_variables_df, caption = "Três Variáveis Mais Influentes em Cada Componente Principal")
```

```{r}
fviz_pca_var(pca, 
             col.var = "contrib", 
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE) +
  labs(title = "Contribuição das Variáveis na PCA")
```

```{r}
pca_scores <- pca$x[, 1:3]

ggplot(data.frame(PCA1 = pca_scores[, 1], PCA2 = pca_scores[, 2]), aes(x = PCA1, y = PCA2)) +
  geom_point() +
  labs(x = "PCA1", y = "PCA2", title = "PCA1 vs PCA2") +
  theme_minimal() 


ggplot(data.frame(PCA1 = pca_scores[, 1], PCA3 = pca_scores[, 3]), aes(x = PCA1, y = PCA3)) +
  geom_point() +
  labs(x = "PCA1", y = "PCA3", title = "PCA1 vs PCA3") +
  theme_minimal() 


ggplot(data.frame(PCA2 = pca_scores[, 2], PCA3 = pca_scores[, 3]), aes(x = PCA2, y = PCA3)) +
  geom_point() +
  labs(x = "PCA2", y = "PCA3", title = "PCA2 vs PCA3") +
  theme_minimal() 


```

# Clusterização

A clusterização é uma técnica de aprendizagem não supervisionada que permite agrupar os dados em grupos com características semelhantes. Para realizar a clusterização, é necessário normalizar os dados, de modo a que todas as variáveis tenham a mesma escala. Iremos testar diferentes métodos de clusterização, nomeadamente o K-means, o DBSCAN, o Hierarchical Clustering, o método de mistura de Gaussianas e o método de clustering espectral.

## K-means

O K-means é um dos métodos de clusterização mais populares. O K-means agrupa os dados em K clusters, onde K é um número pré-definido. O K-means é um método iterativo que tenta minimizar a soma dos quadrados das distâncias entre os pontos e os centroides dos clusters.

Através do gráfico e pelo método do cotovelo, é possível perceber que o número ótimo de clusters é 3.

```{r}
fviz_nbclust(df_scaled, kmeans, method = "wss") +
  labs(title = "Método Elbow para Definir o Número Ótimo de Clusters")
```

```{r}
kmeans_clusters <- kmeans(df_scaled, centers = 4, nstart = 25)
df$kmeanscluster <- as.factor(kmeans_clusters$cluster)

pca_scores <- as.data.frame(pca$x[, 1:4])

pca_scores$kmeanscluster <- as.factor(kmeans_clusters$cluster)

ggplot(pca_scores, aes(x = PC1, y = PC2, color = kmeanscluster)) +
  geom_point() +
  labs(title = "K-means Clustering (PC1 vs PC2)", color= "Clusters por Kmeans") +
  theme_minimal()

```

```{r}
fviz_pca_biplot(pca, 
                label = "var", 
                habillage = df$kmeanscluster, 
                addEllipses = TRUE, 
                ellipse.level = 0.95,
                palette = "jco") +
  labs(title = "Biplot da PCA com Clusters")
```

Através de testes ANOVA e Tukey conseguimos ver que as variáveis que são significativas para a clusterização são:

-   `Weight` - Que é significativamente diferente entre os 3 clusters.

-   `Height` - Que é significativamente diferente entre os 3 clusters.

-   `Session Duartion` - Que é significativamente diferente entre os clusters 2-3 e entre os clusters 1-3, não havendo evidência estatística para diferença entre os clusters 1-2.

-   `Calories Burned` - Que é significativamente diferente entre os 3 clusters.

-   `Fat Percentage` - Que é significativamente diferente entre os 3 clusters.

-   `Water Intake` - Que é significativamente diferente entre os 3 clusters.

-   `Workout Frequency` - Que é significativamente diferente entre os clusters 2-3 e entre os clusters 1-3, não havendo evidência estatística para diferença entre os clusters 1-2.

-   `Experience Level` - Que é significativamente diferente entre os clusters 2-3 e entre os clusters 1-3, não havendo evidência estatística para diferença entre os clusters 1-2.

-   `BMI` - Que é significativamente diferente entre os 3 clusters.

```{r}
# Realizando a ANOVA para cada variável numérica e depois o teste de Tukey
resultados_posthoc <- lapply(df[, sapply(df, is.numeric)], function(x) {
  aov_result <- aov(x ~ kmeanscluster, data = df)
  
  # Realizar o teste de Tukey se a ANOVA for significativa
  if (summary(aov_result)[[1]]$`Pr(>F)`[1] < 0.05) {
    tukey_result <- TukeyHSD(aov_result)
    return(tukey_result)
  } else {
    return(NULL)  # Se não for significativo, retornamos NULL
  }
})

# Filtrando variáveis com resultados de Tukey
resultados_posthoc_significativos <- resultados_posthoc[sapply(resultados_posthoc, function(x) !is.null(x))]

# Função para gerar uma tabela com os resultados do Tukey
tukey_table <- function(var_name, tukey_result) {
  # Criando a tabela para a variável
  result_df <- data.frame(
    Comparação = rownames(tukey_result),
    Diferença_Média = tukey_result[, "diff"],
    Intervalo_Confiança = paste("[", round(tukey_result[, "lwr"], 2), ", ", round(tukey_result[, "upr"], 2), "]", sep = ""),
    Valor_p_Ajustado = round(tukey_result[, "p adj"], 3)
  )
  
  # Renomeando as colunas
  colnames(result_df) <- c("Comparação", paste("Diferença Média (", var_name, ")", sep = ""), "Intervalo de Confiança", "Valor p Ajustado")
  
  return(result_df)
}

# Aplicando a função para cada variável significativa
resultados_tukey_all <- lapply(names(resultados_posthoc_significativos), function(var_name) {
  tukey_result <- resultados_posthoc_significativos[[var_name]]
  tukey_table(var_name, tukey_result[[1]])
})

# Gerando a tabela simples em LaTeX
lapply(resultados_tukey_all, function(tabela) {
  var_name <- names(tabela)[2]
  
  # Gerando a tabela com kable (formato latex)
  kable(tabela, 
        caption = paste("Resultados do Teste de Tukey para a variável", var_name), 
        digits = c(0, 2, 0, 3), 
        align = "lccc", 
        col.names = c("Comparação", "Diferença Média", "Intervalo de Confiança", "Valor p Ajustado"))
})


```

```{r}
violin_boxplot <- function(df, variavel, separacao, titulo, xtitulo, ytitulo) {
  ggplot(df, aes(x = separacao, y = variavel, fill = separacao)) +
    geom_violin(trim = FALSE, alpha = 0.5) +  # Gráfico de violino
    geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +  # Boxplot embutido
    labs(title = titulo, x = xtitulo, y = ytitulo) +
    theme_minimal() +
    theme(legend.position = "none")  # Remove a legenda
}

```

```{r}
violin_boxplot(df, df$Weight..kg., df$kmeanscluster, "Diferença entre a massa nos diferentes clusters", "Clusters", "Massa (kg)")

violin_boxplot(df, df$Height..m., df$kmeanscluster, "Diferença entre a altura nos diferentes clusters", "Clusters", "Altura (m)")

violin_boxplot(df, df$Session_Duration..hours., df$kmeanscluster, "Diferença entre a duração do treino nos diferentes clusters", "Clusters", "Duração do treino (Horas)")


violin_boxplot(df, df$Calories_Burned, df$kmeanscluster, "Diferença entre as calorias queimadas nos diferentes clusters", "Clusters", "Calorias Queimadas (kcal)")

violin_boxplot(df, df$Fat_Percentage, df$kmeanscluster, "Diferença entre percentagem de massa gorda nos diferentes clusters", "Clusters", "Percentagem de Massa Gorda (%)")


violin_boxplot(df, df$Water_Intake..liters., df$kmeanscluster, "Diferença entre a ingestão de água nos diferentes clusters", "Clusters", "Ingestão de Água (L)")


violin_boxplot(df, df$Workout_Frequency..days.week., df$kmeanscluster, "Diferença entre a frequência de treinos nos diferentes clusters", "Clusters", "Frequência de Treinos (dias/semana)")


violin_boxplot(df, df$BMI, df$kmeanscluster, "Diferença entre o índice de massa corporal nos diferentes clusters", "Clusters", "Índice de Massa Corporal")

```

```{r}
sil <- silhouette(kmeans_clusters$cluster, dist(df_scaled))
fviz_silhouette(sil) +
  labs(title = "Silhouette Plot dos Clusters")
```

## Gaussian Mixture Model

```{r}
gmm_clusters <- Mclust(df_scaled, G = 4)
summary(gmm_clusters)

df$gmmcluster <- as.factor(gmm_clusters$classification)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = df$gmmcluster)) +
  geom_point() +
  labs(title = "GMM Clustering (PC1 vs PC2)", color= "Clusters por GMM") +
  theme_minimal()


```

```{r}
violin_boxplot(df, df$Weight..kg., df$gmmcluster, "Diferença entre a massa nos diferentes clusters", "Clusters", "Massa (kg)")

violin_boxplot(df, df$Height..m., df$gmmcluster, "Diferença entre a altura nos diferentes clusters", "Clusters", "Altura (m)")

violin_boxplot(df, df$Session_Duration..hours., df$gmmcluster, "Diferença entre a duração do treino nos diferentes clusters", "Clusters", "Duração do treino (Horas)")


violin_boxplot(df, df$Calories_Burned, df$gmmcluster, "Diferença entre as calorias queimadas nos diferentes clusters", "Clusters", "Calorias Queimadas (kcal)")

violin_boxplot(df, df$Fat_Percentage, df$gmmcluster, "Diferença entre percentagem de massa gorda nos diferentes clusters", "Clusters", "Percentagem de Massa Gorda (%)")


violin_boxplot(df, df$Water_Intake..liters., df$gmmcluster, "Diferença entre a ingestão de água nos diferentes clusters", "Clusters", "Ingestão de Água (L)")


violin_boxplot(df, df$Workout_Frequency..days.week., df$gmmcluster, "Diferença entre a frequência de treinos nos diferentes clusters", "Clusters", "Frequência de Treinos (dias/semana)")


violin_boxplot(df, df$BMI, df$gmmcluster, "Diferença entre o índice de massa corporal nos diferentes clusters", "Clusters", "Índice de Massa Corporal")
```
